# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:47:47+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class AmpIndexStatusVerdict(Enum):
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    PASS = 'PASS'
    PARTIAL = 'PARTIAL'
    FAIL = 'FAIL'
    NEUTRAL = 'NEUTRAL'


class IndexingState(Enum):
    AMP_INDEXING_STATE_UNSPECIFIED = 'AMP_INDEXING_STATE_UNSPECIFIED'
    AMP_INDEXING_ALLOWED = 'AMP_INDEXING_ALLOWED'
    BLOCKED_DUE_TO_NOINDEX = 'BLOCKED_DUE_TO_NOINDEX'
    BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER = (
        'BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER'
    )


class PageFetchState(Enum):
    PAGE_FETCH_STATE_UNSPECIFIED = 'PAGE_FETCH_STATE_UNSPECIFIED'
    SUCCESSFUL = 'SUCCESSFUL'
    SOFT_404 = 'SOFT_404'
    BLOCKED_ROBOTS_TXT = 'BLOCKED_ROBOTS_TXT'
    NOT_FOUND = 'NOT_FOUND'
    ACCESS_DENIED = 'ACCESS_DENIED'
    SERVER_ERROR = 'SERVER_ERROR'
    REDIRECT_ERROR = 'REDIRECT_ERROR'
    ACCESS_FORBIDDEN = 'ACCESS_FORBIDDEN'
    BLOCKED_4XX = 'BLOCKED_4XX'
    INTERNAL_CRAWL_ERROR = 'INTERNAL_CRAWL_ERROR'
    INVALID_URL = 'INVALID_URL'


class RobotsTxtState(Enum):
    ROBOTS_TXT_STATE_UNSPECIFIED = 'ROBOTS_TXT_STATE_UNSPECIFIED'
    ALLOWED = 'ALLOWED'
    DISALLOWED = 'DISALLOWED'


class Verdict(Enum):
    VERDICT_UNSPECIFIED = 'VERDICT_UNSPECIFIED'
    PASS = 'PASS'
    PARTIAL = 'PARTIAL'
    FAIL = 'FAIL'
    NEUTRAL = 'NEUTRAL'


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


class AmpIssue(BaseModel):
    issueMessage: Optional[str] = Field(
        None, description='Brief description of this issue.'
    )
    severity: Optional[Severity] = Field(
        None, description='Severity of this issue: WARNING or ERROR.'
    )


class ApiDataRow(BaseModel):
    clicks: Optional[float] = None
    ctr: Optional[float] = None
    impressions: Optional[float] = None
    keys: Optional[List[str]] = None
    position: Optional[float] = None


class Dimension(Enum):
    QUERY = 'QUERY'
    PAGE = 'PAGE'
    COUNTRY = 'COUNTRY'
    DEVICE = 'DEVICE'
    SEARCH_APPEARANCE = 'SEARCH_APPEARANCE'


class Operator(Enum):
    EQUALS = 'EQUALS'
    NOT_EQUALS = 'NOT_EQUALS'
    CONTAINS = 'CONTAINS'
    NOT_CONTAINS = 'NOT_CONTAINS'
    INCLUDING_REGEX = 'INCLUDING_REGEX'
    EXCLUDING_REGEX = 'EXCLUDING_REGEX'


class ApiDimensionFilter(BaseModel):
    dimension: Optional[Dimension] = None
    expression: Optional[str] = None
    operator: Optional[Operator] = None


class GroupType(Enum):
    AND = 'AND'


class ApiDimensionFilterGroup(BaseModel):
    filters: Optional[List[ApiDimensionFilter]] = None
    groupType: Optional[GroupType] = None


class BlockedResource(BaseModel):
    url: Optional[str] = Field(None, description='URL of the blocked resource.')


class Image(BaseModel):
    data: Optional[str] = Field(
        None,
        description='Image data in format determined by the mime type. Currently, the format will always be "image/png", but this might change in the future.',
    )
    mimeType: Optional[str] = Field(
        None, description='The mime-type of the image data.'
    )


class CrawledAs(Enum):
    CRAWLING_USER_AGENT_UNSPECIFIED = 'CRAWLING_USER_AGENT_UNSPECIFIED'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'


class IndexingState1(Enum):
    INDEXING_STATE_UNSPECIFIED = 'INDEXING_STATE_UNSPECIFIED'
    INDEXING_ALLOWED = 'INDEXING_ALLOWED'
    BLOCKED_BY_META_TAG = 'BLOCKED_BY_META_TAG'
    BLOCKED_BY_HTTP_HEADER = 'BLOCKED_BY_HTTP_HEADER'
    BLOCKED_BY_ROBOTS_TXT = 'BLOCKED_BY_ROBOTS_TXT'


class IndexStatusInspectionResult(BaseModel):
    coverageState: Optional[str] = Field(
        None,
        description="Could Google find and index the page. More details about page indexing appear in 'indexing_state'.",
    )
    crawledAs: Optional[CrawledAs] = Field(
        None, description='Primary crawler that was used by Google to crawl your site.'
    )
    googleCanonical: Optional[str] = Field(
        None,
        description='The URL of the page that Google selected as canonical. If the page was not indexed, this field is absent.',
    )
    indexingState: Optional[IndexingState1] = Field(
        None,
        description='Whether or not the page blocks indexing through a noindex rule.',
    )
    lastCrawlTime: Optional[str] = Field(
        None,
        description='Last time this URL was crawled by Google using the [primary crawler](https://support.google.com/webmasters/answer/7440203#primary_crawler). Absent if the URL was never crawled successfully.',
    )
    pageFetchState: Optional[PageFetchState] = Field(
        None,
        description='Whether or not Google could retrieve the page from your server. Equivalent to ["page fetch"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report.',
    )
    referringUrls: Optional[List[str]] = Field(
        None,
        description='URLs that link to the inspected URL, directly and indirectly.',
    )
    robotsTxtState: Optional[RobotsTxtState] = Field(
        None,
        description='Whether or not the page is blocked to Google by a robots.txt rule.',
    )
    sitemap: Optional[List[str]] = Field(
        None,
        description='Any sitemaps that this URL was listed in, as known by Google. Not guaranteed to be an exhaustive list, especially if Google did not discover this URL through a sitemap. Absent if no sitemaps were found.',
    )
    userCanonical: Optional[str] = Field(
        None,
        description='The URL that your page or site [declares as canonical](https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?#define-canonical). If you did not declare a canonical URL, this field is absent.',
    )
    verdict: Optional[Verdict] = Field(
        None,
        description='High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection).',
    )


class InspectUrlIndexRequest(BaseModel):
    inspectionUrl: Optional[str] = Field(
        None,
        description='Required. URL to inspect. Must be under the property specified in "site_url".',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. An [IETF BCP-47](https://en.wikipedia.org/wiki/IETF_language_tag) language code representing the requested language for translated issue messages, e.g. "en-US", "or "de-CH". Default value is "en-US".',
    )
    siteUrl: Optional[str] = Field(
        None,
        description='Required. The URL of the property as defined in Search Console. **Examples:** `http://www.example.com/` for a URL-prefix property, or `sc-domain:example.com` for a Domain property.',
    )


class Rule(Enum):
    MOBILE_FRIENDLY_RULE_UNSPECIFIED = 'MOBILE_FRIENDLY_RULE_UNSPECIFIED'
    USES_INCOMPATIBLE_PLUGINS = 'USES_INCOMPATIBLE_PLUGINS'
    CONFIGURE_VIEWPORT = 'CONFIGURE_VIEWPORT'
    FIXED_WIDTH_VIEWPORT = 'FIXED_WIDTH_VIEWPORT'
    SIZE_CONTENT_TO_VIEWPORT = 'SIZE_CONTENT_TO_VIEWPORT'
    USE_LEGIBLE_FONT_SIZES = 'USE_LEGIBLE_FONT_SIZES'
    TAP_TARGETS_TOO_CLOSE = 'TAP_TARGETS_TOO_CLOSE'


class MobileFriendlyIssue(BaseModel):
    rule: Optional[Rule] = Field(None, description='Rule violated.')


class IssueType(Enum):
    MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED = 'MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED'
    USES_INCOMPATIBLE_PLUGINS = 'USES_INCOMPATIBLE_PLUGINS'
    CONFIGURE_VIEWPORT = 'CONFIGURE_VIEWPORT'
    FIXED_WIDTH_VIEWPORT = 'FIXED_WIDTH_VIEWPORT'
    SIZE_CONTENT_TO_VIEWPORT = 'SIZE_CONTENT_TO_VIEWPORT'
    USE_LEGIBLE_FONT_SIZES = 'USE_LEGIBLE_FONT_SIZES'
    TAP_TARGETS_TOO_CLOSE = 'TAP_TARGETS_TOO_CLOSE'


class MobileUsabilityIssue(BaseModel):
    issueType: Optional[IssueType] = Field(
        None, description='Mobile-usability issue type.'
    )
    message: Optional[str] = Field(
        None, description='Additional information regarding the issue.'
    )
    severity: Optional[Severity] = Field(
        None, description='Not returned; reserved for future use.'
    )


class ResourceIssue(BaseModel):
    blockedResource: Optional[BlockedResource] = Field(
        None, description='Describes a blocked resource issue.'
    )


class RichResultsIssue(BaseModel):
    issueMessage: Optional[str] = Field(None, description='Rich Results issue type.')
    severity: Optional[Severity] = Field(
        None,
        description='Severity of this issue: WARNING, or ERROR. Items with an issue of status ERROR cannot appear with rich result features in Google Search results.',
    )


class RunMobileFriendlyTestRequest(BaseModel):
    requestScreenshot: Optional[bool] = Field(
        None, description='Whether or not screenshot is requested. Default is false.'
    )
    url: Optional[str] = Field(None, description='URL for inspection.')


class MobileFriendliness(Enum):
    MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED = 'MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED'
    MOBILE_FRIENDLY = 'MOBILE_FRIENDLY'
    NOT_MOBILE_FRIENDLY = 'NOT_MOBILE_FRIENDLY'


class AggregationType(Enum):
    AUTO = 'AUTO'
    BY_PROPERTY = 'BY_PROPERTY'
    BY_PAGE = 'BY_PAGE'


class DataState(Enum):
    DATA_STATE_UNSPECIFIED = 'DATA_STATE_UNSPECIFIED'
    FINAL = 'FINAL'
    ALL = 'ALL'


class Dimension1(Enum):
    DATE = 'DATE'
    QUERY = 'QUERY'
    PAGE = 'PAGE'
    COUNTRY = 'COUNTRY'
    DEVICE = 'DEVICE'
    SEARCH_APPEARANCE = 'SEARCH_APPEARANCE'


class SearchType(Enum):
    WEB = 'WEB'
    IMAGE = 'IMAGE'
    VIDEO = 'VIDEO'
    NEWS = 'NEWS'
    DISCOVER = 'DISCOVER'
    GOOGLE_NEWS = 'GOOGLE_NEWS'


class Type(Enum):
    WEB = 'WEB'
    IMAGE = 'IMAGE'
    VIDEO = 'VIDEO'
    NEWS = 'NEWS'
    DISCOVER = 'DISCOVER'
    GOOGLE_NEWS = 'GOOGLE_NEWS'


class SearchAnalyticsQueryRequest(BaseModel):
    aggregationType: Optional[AggregationType] = Field(
        None,
        description='[Optional; Default is \\"auto\\"] How data is aggregated. If aggregated by property, all data for the same property is aggregated; if aggregated by page, all data is aggregated by canonical URI. If you filter or group by page, choose AUTO; otherwise you can aggregate either by property or by page, depending on how you want your data calculated; see the help documentation to learn how data is calculated differently by site versus by page. **Note:** If you group or filter by page, you cannot aggregate by property. If you specify any value other than AUTO, the aggregation type in the result will match the requested type, or if you request an invalid type, you will get an error. The API will never change your aggregation type if the requested type is invalid.',
    )
    dataState: Optional[DataState] = Field(
        None,
        description='The data state to be fetched, can be full or all, the latter including full and partial data.',
    )
    dimensionFilterGroups: Optional[List[ApiDimensionFilterGroup]] = Field(
        None,
        description='[Optional] Zero or more filters to apply to the dimension grouping values; for example, \'query contains \\"buy\\"\' to see only data where the query string contains the substring \\"buy\\" (not case-sensitive). You can filter by a dimension without grouping by it.',
    )
    dimensions: Optional[List[Dimension1]] = Field(
        None,
        description='[Optional] Zero or more dimensions to group results by. Dimensions are the group-by values in the Search Analytics page. Dimensions are combined to create a unique row key for each row. Results are grouped in the order that you supply these dimensions.',
    )
    endDate: Optional[str] = Field(
        None,
        description='[Required] End date of the requested date range, in YYYY-MM-DD format, in PST (UTC - 8:00). Must be greater than or equal to the start date. This value is included in the range.',
    )
    rowLimit: Optional[int] = Field(
        None,
        description='[Optional; Default is 1000] The maximum number of rows to return. Must be a number from 1 to 25,000 (inclusive).',
    )
    searchType: Optional[SearchType] = Field(
        None,
        description='[Optional; Default is \\"web\\"] The search type to filter for.',
    )
    startDate: Optional[str] = Field(
        None,
        description=' [Required] Start date of the requested date range, in YYYY-MM-DD format, in PST time (UTC - 8:00). Must be less than or equal to the end date. This value is included in the range.',
    )
    startRow: Optional[int] = Field(
        None,
        description='[Optional; Default is 0] Zero-based index of the first row in the response. Must be a non-negative number.',
    )
    type: Optional[Type] = Field(
        None,
        description='Optional. [Optional; Default is \\"web\\"] Type of report: search type, or either Discover or Gnews.',
    )


class ResponseAggregationType(Enum):
    AUTO = 'AUTO'
    BY_PROPERTY = 'BY_PROPERTY'
    BY_PAGE = 'BY_PAGE'


class SearchAnalyticsQueryResponse(BaseModel):
    responseAggregationType: Optional[ResponseAggregationType] = Field(
        None, description='How the results were aggregated.'
    )
    rows: Optional[List[ApiDataRow]] = Field(
        None,
        description='A list of rows grouped by the key values in the order given in the query.',
    )


class Status(Enum):
    TEST_STATUS_UNSPECIFIED = 'TEST_STATUS_UNSPECIFIED'
    COMPLETE = 'COMPLETE'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    PAGE_UNREACHABLE = 'PAGE_UNREACHABLE'


class TestStatus(BaseModel):
    details: Optional[str] = Field(None, description='Error details if applicable.')
    status: Optional[Status] = Field(None, description='Status of the test.')


class PermissionLevel(Enum):
    SITE_PERMISSION_LEVEL_UNSPECIFIED = 'SITE_PERMISSION_LEVEL_UNSPECIFIED'
    SITE_OWNER = 'SITE_OWNER'
    SITE_FULL_USER = 'SITE_FULL_USER'
    SITE_RESTRICTED_USER = 'SITE_RESTRICTED_USER'
    SITE_UNVERIFIED_USER = 'SITE_UNVERIFIED_USER'


class WmxSite(BaseModel):
    permissionLevel: Optional[PermissionLevel] = Field(
        None, description="The user's permission level for the site."
    )
    siteUrl: Optional[str] = Field(None, description='The URL of the site.')


class Type1(Enum):
    NOT_SITEMAP = 'NOT_SITEMAP'
    URL_LIST = 'URL_LIST'
    SITEMAP = 'SITEMAP'
    RSS_FEED = 'RSS_FEED'
    ATOM_FEED = 'ATOM_FEED'
    PATTERN_SITEMAP = 'PATTERN_SITEMAP'
    OCEANFRONT = 'OCEANFRONT'


class Type2(Enum):
    WEB = 'WEB'
    IMAGE = 'IMAGE'
    VIDEO = 'VIDEO'
    NEWS = 'NEWS'
    MOBILE = 'MOBILE'
    ANDROID_APP = 'ANDROID_APP'
    PATTERN = 'PATTERN'
    IOS_APP = 'IOS_APP'
    DATA_FEED_ELEMENT = 'DATA_FEED_ELEMENT'


class WmxSitemapContent(BaseModel):
    indexed: Optional[str] = Field(None, description='*Deprecated; do not use.*')
    submitted: Optional[str] = Field(
        None, description='The number of URLs in the sitemap (of the content type).'
    )
    type: Optional[Type2] = Field(
        None,
        description='The specific type of content in this sitemap. For example: `web`.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AmpInspectionResult(BaseModel):
    ampIndexStatusVerdict: Optional[AmpIndexStatusVerdict] = Field(
        None, description='Index status of the AMP URL.'
    )
    ampUrl: Optional[str] = Field(
        None,
        description='URL of the AMP that was inspected. If the submitted URL is a desktop page that refers to an AMP version, the AMP version will be inspected.',
    )
    indexingState: Optional[IndexingState] = Field(
        None,
        description='Whether or not the page blocks indexing through a noindex rule.',
    )
    issues: Optional[List[AmpIssue]] = Field(
        None,
        description='A list of zero or more AMP issues found for the inspected URL.',
    )
    lastCrawlTime: Optional[str] = Field(
        None,
        description='Last time this AMP version was crawled by Google. Absent if the URL was never crawled successfully.',
    )
    pageFetchState: Optional[PageFetchState] = Field(
        None, description='Whether or not Google could fetch the AMP.'
    )
    robotsTxtState: Optional[RobotsTxtState] = Field(
        None,
        description='Whether or not the page is blocked to Google by a robots.txt rule.',
    )
    verdict: Optional[Verdict] = Field(
        None,
        description='The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results.',
    )


class Item(BaseModel):
    issues: Optional[List[RichResultsIssue]] = Field(
        None,
        description='A list of zero or more rich result issues found for this instance.',
    )
    name: Optional[str] = Field(
        None, description='The user-provided name of this item.'
    )


class MobileUsabilityInspectionResult(BaseModel):
    issues: Optional[List[MobileUsabilityIssue]] = Field(
        None,
        description='A list of zero or more mobile-usability issues detected for this URL.',
    )
    verdict: Optional[Verdict] = Field(
        None, description='High-level mobile-usability inspection result for this URL.'
    )


class RunMobileFriendlyTestResponse(BaseModel):
    mobileFriendliness: Optional[MobileFriendliness] = Field(
        None, description='Test verdict, whether the page is mobile friendly or not.'
    )
    mobileFriendlyIssues: Optional[List[MobileFriendlyIssue]] = Field(
        None, description='List of mobile-usability issues.'
    )
    resourceIssues: Optional[List[ResourceIssue]] = Field(
        None, description='Information about embedded resources issues.'
    )
    screenshot: Optional[Image] = Field(
        None, description='Screenshot of the requested URL.'
    )
    testStatus: Optional[TestStatus] = Field(
        None, description='Final state of the test, can be either complete or an error.'
    )


class SitesListResponse(BaseModel):
    siteEntry: Optional[List[WmxSite]] = Field(
        None,
        description='Contains permission level information about a Search Console site. For more information, see [Permissions in Search Console](https://support.google.com/webmasters/answer/2451999).',
    )


class WmxSitemap(BaseModel):
    contents: Optional[List[WmxSitemapContent]] = Field(
        None, description='The various content types in the sitemap.'
    )
    errors: Optional[str] = Field(
        None,
        description='Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly.',
    )
    isPending: Optional[bool] = Field(
        None, description='If true, the sitemap has not been processed.'
    )
    isSitemapsIndex: Optional[bool] = Field(
        None, description='If true, the sitemap is a collection of sitemaps.'
    )
    lastDownloaded: Optional[str] = Field(
        None,
        description='Date & time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd).',
    )
    lastSubmitted: Optional[str] = Field(
        None,
        description='Date & time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd).',
    )
    path: Optional[str] = Field(None, description='The url of the sitemap.')
    type: Optional[Type1] = Field(
        None, description='The type of the sitemap. For example: `rssFeed`.'
    )
    warnings: Optional[str] = Field(
        None,
        description='Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps.',
    )


class DetectedItems(BaseModel):
    items: Optional[List[Item]] = Field(None, description='List of Rich Results items.')
    richResultType: Optional[str] = Field(None, description='Rich Results type')


class RichResultsInspectionResult(BaseModel):
    detectedItems: Optional[List[DetectedItems]] = Field(
        None,
        description='A list of zero or more rich results detected on this page. Rich results that cannot even be parsed due to syntactic issues will not be listed here.',
    )
    verdict: Optional[Verdict] = Field(
        None, description='High-level rich results inspection result for this URL.'
    )


class SitemapsListResponse(BaseModel):
    sitemap: Optional[List[WmxSitemap]] = Field(
        None,
        description='Contains detailed information about a specific URL submitted as a [sitemap](https://support.google.com/webmasters/answer/156184).',
    )


class UrlInspectionResult(BaseModel):
    ampResult: Optional[AmpInspectionResult] = Field(
        None,
        description='Result of the AMP analysis. Absent if the page is not an AMP page.',
    )
    indexStatusResult: Optional[IndexStatusInspectionResult] = Field(
        None, description='Result of the index status analysis.'
    )
    inspectionResultLink: Optional[str] = Field(
        None, description='Link to Search Console URL inspection.'
    )
    mobileUsabilityResult: Optional[MobileUsabilityInspectionResult] = Field(
        None, description='Result of the Mobile usability analysis.'
    )
    richResultsResult: Optional[RichResultsInspectionResult] = Field(
        None,
        description='Result of the Rich Results analysis. Absent if there are no rich results found.',
    )


class InspectUrlIndexResponse(BaseModel):
    inspectionResult: Optional[UrlInspectionResult] = Field(
        None, description='URL inspection results.'
    )
